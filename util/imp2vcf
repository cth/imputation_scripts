#!/home/fng514/bin/ruby
require 'pp'
require 'set'
require 'zlib'
require 'thread'
require 'thread/pool'
require 'optparse'
require 'filesize'
require 'test/unit'
require 'distribution'
require 'tempfile'
require 'thread'
$stdout.sync = true

def open_maybe_compressed(file)
		dose_file_reader =  (/^.*gz$/.match(@options[:dosefile]) ?  Zlib::GzipReader : File).open(file)
end

class AssertionError < RuntimeError
end

def rt_assert &block
    raise AssertionError unless yield
end

# MemoryUsageMonitor from: http://zogovic.com/post/59091704817/memory-usage-monitor-in-ruby
class MemoryUsageMonitor
  attr_reader :peak_memory

  def initialize(frequency)
    puts "Memory monitor initialized at a frequency #{frequency} seconds"
    @frequency = frequency.to_i
    @peak_memory = 0
    @thread = Thread.new do
      while true do
        memory = `ps -o rss -p #{Process::pid}`.chomp.split("\n").last.strip.to_i
        @peak_memory =[memory, @peak_memory].max
	puts "Current memory #{Filesize.from(memory.to_s + " KB").pretty}. Peak memory #{Filesize.from(@peak_memory.to_s + " KB").pretty}."
        sleep @frequency
      end
    end
  end
  
  def stop
    Thread.kill(@thread)
  end
end

def gzfile?(file)
	if /^.*gz$/.match(file)  
		Zlib::GzipReader 
	else
		File
	end
end

class BufferedFileOutput
	def initialize(file,buffer_max_size)
		@buffer_max_size, @file = buffer_max_size,file
		@buffer = []
	end

	def puts(str)
		flush_buffer if @buffer.size == @buffer_max_size
		@buffer << str
	end

	def close 
		flush_buffer
		@file.close
	end

	def flush_buffer
		STDOUT.puts "flush"
		@buffer.each { |line| @file.puts(line) }
		@buffer = []
	end
end 


class GenoConverter
	class << self
		# The Dosage represents the predicted dosage of the non reference allele given the data available, 
		# it will always have a value between 0 and 2.
		# The formula is Dosage = Pr(Het|Data) + 2*Pr(Alt|Data)
		# See, http://www.1000genomes.org/faq/what-does-genotype-dosage-mean-phase1-integrated-call-set
		def likelihoods_to_dosage(p_aa, p_ab, p_bb)
			p_bb * 2 + p_ab
		end

		def threshold_likelihoods(likelihoods,threshold)
			threshold_genotype = [ "0/0", "0/1", "1/1" ] 
			max_l = 0
			max_i = nil
			likelihoods.each_with_index do |l,i|
				if l > max_l then
					max_l = l
					max_i = i
				end
			end

			if max_l > threshold then
				threshold_genotype[max_i]
			else
				"."
			end
		end

		# Genotype likelihoods are required to be log10 scaled in VCF 
		def log_likelihoods(likelihoods)
			likelihoods.map { |l|  l.to_f == 0 ? -100 : Math.log10(l.to_f) }
		end

		def dosage_to_likelihoods(dosage)
			deltas = [ dosage,  (dosage - 1).abs, (dosage - 2).abs ]
			deltas.collect { |d|  Distribution::Beta.pdf(d,1,2)/2 }
		end

		def dosage_to_genotype(dosage, likelihood_threshold)
			threshold_likelihoods(dosage_to_likelihoods(dosage), likelihood_threshold)
		end
	end
end

class VCF
	@@mandatory_fields = [ "#CHROM","POS","ID","REF","ALT","QUAL","FILTER","INFO","FORMAT"]

	def initialize(options)
		@options = options
	end

	def header
		[ 
			'##fileformat=VCFv4.1',
			'##INFO=<ID=INFO,Number=0,Type=Flag,Description="MACH info Rsq (R-squared quality of imputation)">',
			'##FORMAT=<ID=GL,Number=.,Type=Float,Description="Genotype Likelihoods">'
		].join("\n")
	end

	def write
		puts "Attempting to write #{@options[:vcf_file]}"
		@vcfout = File.open(@options[:vcf_file], "w")
		@vcfout.puts(header)

		# MaCh-mode
		if @options[:machdose] and @options[:machinfo] then # mach mode
			from_mach # writes to @vcfout
		elsif @options[:samplefile] and @options[:genfile] then  # impute2 mode
			from_impute2 # write to @vcfout
		else
			raise "Missing input files" 
		end

		@vcfout.close
	end

	def sample_fields_format
		[ @options[:threshold],@options[:dosage],@options[:likelihood] ].
			zip(["GT","DS", "GL"]).
			collect {|the| the.last if the.first }.
			compact.
			join(":") 
	end

	def from_mach
		# Read .info file to create VCF mandatory fields
		vcflines = []

		info_lines = File.readlines(@options[:machinfo]) 
		puts "slurped #{@options[:machinfo]}"
			info_lines.each_with_index do |line,idx|
#				workers.process do 
					fields = line.chomp.split(" ")
					if idx == 0 then
						puts fields.inspect
						rt_assert { fields[0] == "SNP" }
						rt_assert { fields[1] == "Al1" }
						rt_assert { fields[2] == "Al2" }
					else
						chr, pos, extra = fields[0].split(":")	
						vcfline = []
						vcfline << chr # CHR
						vcfline << pos			# POS 
						vcfline << fields[0] 		# ID
						vcfline << fields[1]		# REF allele 
						vcfline << fields[2]		# ALT allele 
						vcfline << 100			# QUAL (pseudo)
						vcfline << "PASS"		# FILTER (pseudo)
						vcfline << "INFO=#{fields[6]}"	# INFO
						vcfline	<< sample_fields_format
						vcflines[idx-1] = vcfline
					end
#				end
			end
		#end


		puts "Extracted #{vcflines.size} variants from info file (#{@options[:machinfo]})"

		samples = []
		tmpfiles = [] # We open store results a temporary file for each individual 
		workers = Thread.pool(@options[:threads]) 

		
		gzfile?(@options[:machdose]).open(@options[:machdose]) do |file|
			file.each_with_index do |line,idx|
				puts "processing line #{idx}"
				workers.process do 	
					fields = line.chomp.split(" ")
					puts [fields.size, vcflines.size ].inspect
					rt_assert { fields.size-2 == vcflines.size } 

					samples << fields[0]

					if @options[:tmpdir].nil?
						tmpfile = Tempfile.new("imp2vcf-")
					else
						tmpfile = Tempfile.new("imp2vcf-",@options[:tmpdir])
					end
					2.upto(fields.size-1) do |snp_idx|
						#vcflines[snp_idx-2] << [:threshold,:dosage,:likelihood].collect do |type|
						record = [:threshold,:dosage,:likelihood].collect do |type|
							dosage = fields[snp_idx].to_f
							if @options[type] then
								case type
								when :threshold
									GenoConverter.dosage_to_genotype(dosage, @options[:threshold])
								when :dosage
									dosage
								when :likelihood
									GenoConverter.log_likelihoods(GenoConverter.dosage_to_likelihoods(dosage)).join(",")
								end 
							end
						end.compact.join(":")
						tmpfile.puts(record)
					end
					tmpfiles[idx] = tmpfile
				end
			end
		end

		workers.shutdown

		puts "writing VCF file"

		# Make sure that we have a tmpfile for each sample
		rt_assert { samples.size == tmpfiles.size }

		# Fields header line
		@vcfout.puts((@@mandatory_fields + samples).join("\t"))
		puts tmpfiles.inspect
		tmpfiles.each { |tmp| tmp.rewind }
		# variant lines
		vcflines.size.times do |i|
			@vcfout.puts vcflines[i].collect { |e| e.to_s }.join("\t") + "\t" + (tmpfiles.collect { |x| x.readline.chomp }).join("\t")
		end
		tmpfiles.each { |f| f.close }
	end

	def from_impute2
		# Read sample file:
		samples = [] 
		lineno=0
		File.open(@options[:samplefile]) do |file|
			file.each do |line|
				lineno = lineno + 1
				# FIXME: This should only happen when we have a header
				# next if lineno == 1
				samples << line.chomp.split(" ")[1]
				#samples << line.chomp.split(" ").first
			end
		end
		puts "Read #{lineno-1} samples from #{@options[:samplefile]}"


		markers = []
		if @options[:imputeinfo] then 
			File.open(@options[:imputeinfo]) do |file|
				lineno = 0
				file.each do |line|
					fields = line.chomp.split(/ /)	
					if lineno == 0
						rt_assert {(fields[4] == "info") and (fields[5] == "certainty")}
					else
						markers[lineno] = { :snp => fields[1], :info => fields[4], :certainty => fields[5] }
					end
					lineno = lineno + 1
				end
			end
			puts "Read #{lineno-1} markers from #{@options[:imputeinfo]}"
		end

		opener = /^.*gz$/.match(@options[:genfile]) ? Zlib::GzipReader : File

		checkpoint = 7 % 3
		lineno=1

		@vcfout.puts((@@mandatory_fields + samples).join("\t"))

		opener.open(@options[:genfile]) do |file|
			file.each do |line|
				vcfline = []
				fields = line.chomp.split(" ")
				vcfline << @options[:chr] || fields[0]	# CHR
				vcfline << fields[2] 		# POS 
				vcfline << fields[1]		# ID
				vcfline << fields[3]		# REF allele 
				vcfline << fields[4]		# ALT allele 
				vcfline << 100			# QUAL (pseudo)
				vcfline << "PASS"		# FILTER (pseudo)
				# INFO
				if @options[:imputeinfo] then
					rt_assert { not markers[lineno].nil? }
					rt_assert { fields[1] == markers[lineno][:snp] }
					vcfline << "INFO=#{markers[lineno][:info]};CERTAINTY=#{markers[lineno][:certainty]}" unless markers[lineno].nil?
				else	
					vcfline << "PSEUDO=1"		# INFO (we do not use for anything)
				end

				vcfline << [ @options[:threshold],@options[:dosage],@options[:likelihood] ].
						zip(["GT","DS", "GL"]).
						collect {|the| the.last if the.first }.
						compact.
						join(":") 

				likelihoods = []
				dosages = []
				genotypes = []
				
				rt_assert { fields.size-5 == samples.size*3 } 

				5.upto(fields.size-1) do |i|
					likelihoods << fields[i].to_f
					
					if i % 3 == checkpoint then

						rt_assert { likelihoods.size == 3 }

						vcfline << [:threshold,:dosage,:likelihood].collect { |type|
							##puts options[:type]
							if @options[type] then
								case type
								when :threshold
									GenoConverter.threshold_likelihoods(likelihoods,@options[:threshold].to_f)
								when :dosage
									GenoConverter.likelihoods_to_dosage(*likelihoods)
								when :likelihood
									GenoConverter.log_likelihoods(likelihoods).join(",")
								end 
							end 
						}.compact.join(":")
						likelihoods = []
					end
				end
				@vcfout.puts(vcfline.join("\t"))
				lineno = lineno + 1
			end
		end
	end
end
##################################### tests ##################################

class Test::Unit::Runner
  @@stop_auto_run = true
end


class TestGenoConverter < Test::Unit::TestCase
	def test_dosage_to_likelihoods
		epsilon = 0.000001
		l00, _, _ = *GenoConverter.dosage_to_likelihoods(0)
		assert_in_delta(1, l00, epsilon) 

		_, l01, _ = *GenoConverter.dosage_to_likelihoods(1)
		assert_in_delta(1, l01, epsilon) 

		_, _, l11 = *GenoConverter.dosage_to_likelihoods(2)
		assert_in_delta(1, l11, epsilon) 

		# There and back again:
		0.step(2,0.01) do |d1|
			l=GenoConverter.dosage_to_likelihoods(d1)
			d2=GenoConverter.likelihoods_to_dosage(*l)
			diff=(d1-d2).abs
			assert_in_delta(0, diff, epsilon) 
		end
	end
end

##################################### main ###################################

options = {
	:samplefile => nil,
	:dosage => false,
	:threshold => false,
	:threads => 1
}

OptionParser.new do |opts|
	opts.on( '-h', '--help', 'Display this screen' ) do
		puts opts
		exit
	end

	opts.on("-c", "--chr chrom", "chromosome") do |chrom|
		options[:chr] = chrom
	end 

	# Input files
	opts.on("-S", "--sample-file file","Sample file") do |file|
		options[:samplefile] = file
	end

	opts.on("-G", "--gen-file file", ".gen file") do |file|
		options[:genfile] = file
	end

	opts.on("-J", "--impute-info file", "Impute info file") do |file|
		options[:imputeinfo] = file
	end

	opts.on("-D", "--dose file", "MaCH dose file.") do |file| 
		options[:machdose] = file	
	end

	opts.on("-I", "--info file", "MaCH info file.") do |file|
		options[:machinfo] = file
	end

	# Output file(s)
	opts.on("-V", "--vcf-file file", ".vcf output file") do |file|
		options[:vcf_file] = file	
	end

	opts.on("-T", "--tmpdir dir", "Temporary files directory") do |tmpdir|
		puts tmpdir.inspect
		throw "#{tmpddir} is not a valid directory" unless File.directory?(tmpdir)
		options[:tmpdir] = tmpdir
	end

	
	opts.on("-p" ,"-processors", "How many processers to use") do |threads|
		options[:threads] = threads.to_i
	end

	# Output fields
	opts.on("-l", "--likelihood", "Use genotype likelihoods as provided by IMPUTE2") do 
		options[:likelihood] = true
	end

	opts.on("-d", "--dosage", "Use dosage genotypes rather than genotype likelihoods as provided by IMPUTE2") do 
		options[:dosage] = true
	end

	opts.on("-g", "--genotype", "Threshold likelihoods to infer genotype predictions (default 0.99 threshold)" ) do |n|
		options[:threshold] ||= 0.99
	end

	opts.on("-t", "--threshold n", "Threshold likelihoods to infer genotype predictions with custom threshold" ) do |n|
		options[:threshold] = n.to_f
	end

	opts.on("-m", "--monitor-memory interval", "Monitor and report memory usage at regular intervals" ) do |interval|
		options[:monitor_memory] = interval
	end


	opts.on("-x", "--test", "Run unit tests") do
		options[:test] = true
	end

end.parse!


puts "Selected options:"
pp options

if options[:test] then 
	Test::Unit::Runner.new.run if options[:test]
else
	rt_assert { options[:likelihood] or options[:dosage] or options[:threshold] } 
	rt_assert { options[:vcf_file] or options[:test]}
	mm=MemoryUsageMonitor.new(options[:monitor_memory]) if options[:monitor_memory]
	VCF.new(options).write
	mm.stop unless mm.nil?
end
